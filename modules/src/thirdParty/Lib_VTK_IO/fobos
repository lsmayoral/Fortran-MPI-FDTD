[modes]
modes = shared-gnu static-gnu tests-gnu
        shared-gnu-debug static-gnu-debug tests-gnu-debug
        shared-intel static-intel tests-intel
        shared-intel-debug static-intel-debug tests-intel-debug

[common-variables]
$CSHARED_GNU = -cpp -c -fPIC -frealloc-lhs
$CSHARED_INT = -cpp -c -fpic -assume realloc_lhs
$LSHARED     = -shared
$CSTATIC_GNU = -cpp -c -frealloc-lhs
$CSTATIC_INT = -cpp -c -assume realloc_lhs
$DEBUG_GNU   = -O0 -g3 -Warray-bounds -Wcharacter-truncation -Wline-truncation -Wimplicit-interface -Wimplicit-procedure -Wunderflow -Wuninitialized -fcheck=all -ffree-line-length-132 -fimplicit-none -fbacktrace -fdump-core -finit-real=nan
$DEBUG_INT   = -O0 -check arg_temp_created -check format -check assume -check format -check output_conversion -check pointers -check stack -check uninit -debug all -warn all -extend-source 132 -traceback
$OPTIMIZE    = -O2
$EXDIRS      = src/pre-lib/ BeFoR64/src/tests/ FoXy/src/tests/ PENF/src/tests/ StringiFor/src/tests/

# main modes
[shared-gnu]
template  = template-shared-gnu
target    = src/lib/vtk_fortran.f90
build_dir = ./shared/
output    = libvtkfortran.so
mklib     = shared

[static-gnu]
template  = template-static-gnu
target    = src/lib/vtk_fortran.f90
build_dir = ./static/
output    = libvtkfortran.a
mklib     = static

[tests-gnu]
template  = template-static-gnu
build_dir = exe

[shared-gnu-debug]
template  = template-shared-gnu-debug
target    = src/lib/vtk_fortran.f90
build_dir = ./shared/
output    = libvtkfortran.so
mklib     = shared

[static-gnu-debug]
template  = template-static-gnu-debug
target    = src/lib/vtk_fortran.f90
build_dir = ./static/
output    = libvtkfortran.a
mklib     = static

[tests-gnu-debug]
template  = template-static-gnu-debug
build_dir = exe

[shared-intel]
template  = template-shared-intel
target    = src/lib/vtk_fortran.f90
build_dir = ./shared/
output    = libvtkfortran.so
mklib     = shared

[static-intel]
template  = template-static-intel
target    = src/lib/vtk_fortran.f90
build_dir = ./static/
output    = libvtkfortran.a
mklib     = static

[tests-intel]
template  = template-static-intel
build_dir = exe

[shared-intel-debug]
template  = template-shared-intel-debug
target    = src/lib/vtk_fortran.f90
build_dir = ./shared/
output    = libvtkfortran.so
mklib     = shared

[static-intel-debug]
template  = template-static-intel-debug
target    = src/lib/vtk_fortran.f90
build_dir = ./static/
output    = libvtkfortran.a
mklib     = static

[tests-intel-debug]
template  = template-static-intel-debug
build_dir = exe

#templates
[template-shared-gnu]
compiler     = gnu
cflags       = $CSHARED_GNU $OPTIMIZE
lflags       = $LSHARED $OPTIMIZE
mod_dir      = ./mod/
obj_dir      = ./obj/
src          = ./src/
exclude_dirs = $EXDIRS
colors       = True
quiet        = False
log          = True
jobs         = 10

[template-static-gnu]
compiler     = gnu
cflags       = $CSTATIC_GNU $OPTIMIZE
lflags       = $OPTIMIZE
mod_dir      = ./mod/
obj_dir      = ./obj/
src          = ./src/
exclude_dirs = $EXDIRS
colors       = True
quiet        = False
log          = True
jobs         = 10

[template-shared-gnu-debug]
compiler     = gnu
cflags       = $CSHARED_GNU $DEBUG_GNU
lflags       = $LSHARED $DEBUG_GNU
mod_dir      = ./mod/
obj_dir      = ./obj/
src          = ./src/
exclude_dirs = $EXDIRS
colors       = True
quiet        = False
log          = True
jobs         = 10

[template-static-gnu-debug]
compiler     = gnu
cflags       = $CSTATIC_GNU $DEBUG_GNU
lflags       = $DEBUG_GNU
mod_dir      = ./mod/
obj_dir      = ./obj/
src          = ./src/
exclude_dirs = $EXDIRS
colors       = True
quiet        = False
log          = True
jobs         = 10

[template-shared-intel]
compiler     = intel
cflags       = $CSHARED_INT $OPTIMIZE
lflags       = $LSHARED $OPTIMIZE
mod_dir      = ./mod/
obj_dir      = ./obj/
src          = ./src/
exclude_dirs = $EXDIRS
colors       = True
quiet        = False
log          = True
jobs         = 10

[template-static-intel]
compiler     = intel
cflags       = $CSTATIC_INT $OPTIMIZE
lflags       = $OPTIMIZE
mod_dir      = ./mod/
obj_dir      = ./obj/
src          = ./src/
exclude_dirs = $EXDIRS
colors       = True
quiet        = False
log          = True
jobs         = 10

[template-shared-intel-debug]
compiler     = intel
cflags       = $CSHARED_INT $DEBUG_INT
lflags       = $LSHARED $DEBUG_INT
mod_dir      = ./mod/
obj_dir      = ./obj/
src          = ./src/
exclude_dirs = $EXDIRS
colors       = True
quiet        = False
log          = True
jobs         = 10

[template-static-intel-debug]
compiler     = intel
cflags       = $CSTATIC_INT $DEBUG_INT
lflags       = $DEBUG_INT
mod_dir      = ./mod/
obj_dir      = ./obj/
src          = ./src/
exclude_dirs = $EXDIRS
colors       = True
quiet        = False
log          = True
jobs         = 10

[rule-makedoc]
help   = Rule for building documentation from source files
rule_1 = rm -rf doc/html/*
rule_2 = ford doc/main_page.md
rule_3 = cp -r doc/html/publish/* doc/html/

[rule-deldoc]
help = Rule for deleting documentation
rule = rm -rf doc/html/*

[rule-maketar]
help = Rule for making tar archive of the project
rule = tar -czf vtk_fortran.tar.gz *

[rule-makecoverage]
help   = Rule for performing coverage analysis
rule_1 = FoBiS.py clean -mode tests-gnu
rule_2 = FoBiS.py build -mode tests-gnu -coverage
rule_3 = ./run_tests.sh
rule_4 = gcov -o exe/obj/ src/lib/vtk_fortran*.f90

[rule-coverage-analysis]
help   = Rule for performing coverage analysis and saving reports in markdown
rule_1 = FoBiS.py clean -mode tests-gnu
rule_2 = FoBiS.py build -mode tests-gnu -coverage
rule_3 = ./run_tests.sh
rule_4 = gcov -o exe/obj/ src/lib/vtk_fortran*.f90
rule_5 = FoBiS.py rule -gcov_analyzer wiki/ Coverage-Analysis
rule_6 = rm -f *.gcov XML_*vt?
